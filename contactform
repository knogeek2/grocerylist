Creating a contact form using JavaScript involves HTML for the form structure, CSS for styling, and JavaScript for form validation and submission handling. Below is a simple example of how you can create a contact form.

### Step 1: HTML
Create an HTML file with the structure of the contact form.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Form</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="contact-form">
        <form id="contactForm">
            <h2>Contact Us</h2>
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>
            
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            
            <label for="message">Message:</label>
            <textarea id="message" name="message" required></textarea>
            
            <button type="submit">Submit</button>
        </form>
        <div id="formResponse"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

### Step 2: CSS
Create a CSS file (`styles.css`) to style the contact form.

```css
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.contact-form {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

h2 {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
}

input, textarea {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 3px;
}

button {
    padding: 10px 20px;
    background-color: #5cb85c;
    border: none;
    border-radius: 3px;
    color: #fff;
    cursor: pointer;
}

button:hover {
    background-color: #4cae4c;
}

#formResponse {
    margin-top: 20px;
    font-size: 1.2em;
}
```

### Step 3: JavaScript
Create a JavaScript file (`script.js`) to handle form validation and submission.

```javascript
document.getElementById('contactForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the form from submitting the traditional way

    // Get form values
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const message = document.getElementById('message').value;

    // Perform basic validation
    if(name === '' || email === '' || message === '') {
        displayResponse('Please fill in all fields.', 'error');
        return;
    }

    // Display success message
    displayResponse('Thank you for your message! We will get back to you soon.', 'success');

    // Reset the form
    document.getElementById('contactForm').reset();
});

function displayResponse(message, type) {
    const formResponse = document.getElementById('formResponse');
    formResponse.textContent = message;
    formResponse.className = type;
}
```

### Explanation:
1. **HTML**: The form includes fields for the user's name, email, and message, and a submit button.
2. **CSS**: Styles the form to look clean and visually appealing.
3. **JavaScript**: Handles the form submission, performs basic validation, and displays a response message to the user.

You can extend this example by adding more advanced validation, integrating with a back-end service to send the form data, or adding additional form fields as needed.
